// Code generated by sqlc. DO NOT EDIT.
// source: authors.sql

package gen

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :execresult
INSERT INTO authors (
  id,name,bio
) VALUES (
  ?,?, ? 
)
`

type CreateAuthorParams struct {
	ID   int32
	Name string
	Bio  sql.NullString
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAuthor, arg.ID, arg.Name, arg.Bio)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const deleteAuthorIn = `-- name: DeleteAuthorIn :exec
DELETE FROM authors
WHERE id in (?)
`

func (q *Queries) DeleteAuthorIn(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAuthorIn)
	return err
}

const getAuthorsInCompany = `-- name: GetAuthorsInCompany :many
SELECT id, name, bio, company_id FROM authors where company_id in ( select id from company where id in (?) and name in (?) )
`

func (q *Queries) GetAuthorsInCompany(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, getAuthorsInCompany)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthorsInCompanyById = `-- name: GetAuthorsInCompanyById :many
SELECT id, name, bio, company_id FROM authors where company_id in ( select id from company where id in (?) )
`

func (q *Queries) GetAuthorsInCompanyById(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, getAuthorsInCompanyById)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthorsInOneCompany = `-- name: GetAuthorsInOneCompany :many
SELECT id, name, bio, company_id FROM authors where company_id in ( select id from company where id = ? )
`

func (q *Queries) GetAuthorsInOneCompany(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, getAuthorsInOneCompany)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneAuthor = `-- name: GetOneAuthor :one
SELECT id, name, bio, company_id FROM authors where  id in (?)  and bio=? and  name in (?) and company_id in (?) limit 1
`

func (q *Queries) GetOneAuthor(ctx context.Context, bio sql.NullString) (Author, error) {
	row := q.db.QueryRowContext(ctx, getOneAuthor, bio)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.CompanyID,
	)
	return i, err
}

const listAllAuthors = `-- name: ListAllAuthors :many
SELECT id, name, bio, company_id FROM authors
ORDER BY name
`

func (q *Queries) ListAllAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAllAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio, company_id FROM authors where  bio=? and id in (?)  and name in (?)  ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context, bio sql.NullString) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors, bio)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
